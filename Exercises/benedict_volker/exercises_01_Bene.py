# use this template for completing todays exercises
# make a copy of the file, in a folder with your own name
# add code below to answer the questions; for each question there should be
# a single print() which will give the answer(s) to that question.

# 1)
# what are the quotient and remainder after integer division of 2711274328912 by 23369245575
quotient = 2711274328912 // 23369245575
remainder = 2711274328912 % 23369245575

print("1) Quotient = ", quotient, " und Rest = ", remainder)

# 2)
# assume the variable below is a temperature in degrees Fahrenheit. Print the same temperature converted to °C.
t_fahrenheit = 451
# Formel zur Umrechnung C = (F-32)*(5/9)
t_celsius = (t_fahrenheit-32)*(5/9)

print("2) Die Temperatur in grad Celsius beträgt ", t_celsius)

# 3)
# Given the string 
ds = "DataScience"
# Print the first three and (separately) the last four letters
l4ds = ds[-4:]
f3ds = ds[:3]
print("3a) erste 3 Ziffern = ", f3ds, " und letze 4 Ziffern = ", l4ds)


# Print the string backwards
backwardsds = ds[::-1]
print("3c) DataScience backwards: ", backwardsds)

# Replace "Science" with "Analytics"; `print(ds)` should result in the output 'DataAnalytics'
ds = ds.replace("Science", "Analytics")
print("3d) Datanalytics ersetzt: ", ds)

# 4)
# determine how many more '(' than ')' symbols occur in the following string:
input_string = '()()(()()()(()()((()((()))((()((((()()((((()))()((((())(((((((()(((((((((()(((())(()()(()((()()(()(())(()((((()((()()()((((())((((((()(()(((()())(()((((()))())(())(()(()()))))))))((((((((((((()())()())())(())))(((()()()((((()(((()(()(()()(()(()()(()(((((((())(())(())())))((()())()((((()()((()))(((()()()())))(())))((((())(((()())(())(()))(()((((()())))())((()(())(((()((((()((()(())())))((()))()()(()(()))))((((((((()())((((()()((((()(()())(((((()(()())()))())(((()))()(()(()(()((((()(())(()))(((((()()(()()()(()(((())())(((()()(()()))(((()()(((())())(()(())())()()(())()()()((()(((()(())((()()((())()))((()()))((()()())((((()(()()(()(((()))()(()))))((()(((()()()))(()(((())()(()((()())(()(()()(()())(())()(((()(()())()((((()((()))))())()))((()()()()(())()())()()()((((()))))(()(((()()(((((((())()))()((((()((())()(()())(())()))(()(()())(((((((())))(((()))())))))()))())((())(()()((())()())()))))()((()()())(())((())((((()())())()()()(((()))())))()()))())(()()()(()((((((()()))())()))()(((()(((())((((()()()(()))())()()))))())()))())((())()())(((((())())((())())))(((())(((())(((((()(((((())(()(()())())(()(())(()))(()((((()))())()))))())))((()(()))))())))(((((())()))())()))))()))))(((()))()))))((()))((()((()(()(())()())))(()()()(())()))()((((())))))))(())(()((()()))(()))(()))(()((()))))))()()((((()()))()())()))))))()()()))(()((())(()))((()()()())()(((()((((())())))()((((()(()))))))())))()()())()))(()))))(()())()))))))((())))))))())()))()((())())))(()((()))()))(())))))(()))()())()()))((()(()))()()()()))))())()()))())(())()()))()))((()))))()()(()())))))()()()))((((()))()))))(()(())))(()())))((())())(()))()))))()())))()())()())))))))))()()))))())))((())((()))))())))(((()())))))))(()))()()))(()))()))))()())))))())((((()())))))))())))()()))))))))()))()))))()))))))(())))))))))())))))))))))))))())())((())))))))))()))((())))()))))))))())()(()))))))())))))()()()())()(()()()(()())(()))()()()(()())))())())))()))))())))))))()()()()())(())())()())()))))(()()()()()))))()))())())))((()())()())))()))()))))(()())))()))))))))(((()))()()))))))))))))))))))))(()))(()((()))())))())(()))(()(()(())))))()(()))()))()()))))))))))))()((()())(())())()(())))))())()())((()()))))(()()))))())()(())()))))))))))))))))))))()))(()(()())))))))()()((()))()))))))((())))()))))))))((()))())()()))())()()))((()))())))))))))))(()())()))(())((()(()()))(()())(())))()())(()(())()()))))()))()(()))))))(()))))))))))(()))())))))))))())))))())))(())))))()))))(())())))))))))()(()))))()())))())(()))()())))))))))))))())()()))))()))))))())))))()))))(())(()()()()((())()))())(()))((())()))())())(())(()()))))()))(())()()((())(())))(())))()))())))))))))()(((((())())))(())()))))(())))((()))()(((((((()))))()()))(())))))()(()))))(()()))()))())))))))(()())()))))))))())))(()))())()))(())()((())())()())())(()(()))))()))))))((()())(())()()(()())))()()))(())(())(()))())))()))(()))()()))((((()))))()))((()()()))))()))()))())))(()))()))))(())))()))())()(()))()())))())))))))())))())))()()))))))(()))())())))()))()()())())))))))))))))())))()))(()()))))())))())()(())))())))))))))))))))))()()())())))))()()()((()(()))()()(())()())()))()))))()()()))))))((()))))))))()(()(()((((((()()((()())))))))))))()))())))))((())())(()))())))())))))())()()())(())))())))()())())(())))))))()()(())))()))())))())())())()))))))))()))(()()()())())())))(())())))))))()()())()))))())))())()(())())))))))()())()))(()()(())())))()(()((()()((()()(((((())(()())()))(())()))(())))(())))))))()))()))((()))()))()))))))))()))))))))((()()())(()))(((()))(())))()))((())(((())))()())))())))))((())))))(())())((((((())())()(()))()(()((()())))((())()(()(()))))(())(()()())(())))())((()(((())())))(((()())())))())()(())())((((()()))))())((()))()()()()(())(((((((()()()((()))())(()())))(())())((((()()(()))))()((())))((())()))()(((()))())))()))((()(()))(())(()((((())((((()()(()()))(((())(()))))((((()(()))(())))))((()))(()))((()(((()(()))(()(()((()(())(()(()(()(()()((()))())(((())(()(()))))(()))()()))(())))(())()(((())(()))()((((()()))))())(()))))((())()((((()(((()))())())(((()))()())((())(())())(())()(())()(()()((((((()()))))()()(((()()))))()())()(((()(()))(()(()())(()(()))))(((((()(((())())))))(((((()((()()((())())((((((()(())(()()((()()()()()()()(()()))()(((()))()))(((((((())(((()((()())()((((())(((()(())))()((()(()()()((())((()())()))()))())))())((((((()))(()(()()()))(()((()(()(()))()((()(((()()()((())(((((())()(()))())())((()(())))(()(()())(())((())())())(((()()()(())))))())(()))))))()))))))())((()()()))((()((((((()))(((()((((()()()(((()))())()(()()(((()((()()()()())()()))()()()(()(())((()))))(()))())))))))()(()()(((((())()(()(((((()((()(()()())(()((((((((()((((((())()((((()()()((()((()((((((()))((())))))))())()))((()(()))()(()()(()((())((()()((((((((((((()())(()()()))((((()((((((())(()))())(()()((()()))()(((((((()((()()((((((()(((())))((())))((((((((()()(((((((())(((((()())(((())((())()((((()(((((((()(()(((()((((((()(((()(((((((((((()()((()()(()))((()()(((()(((())))((((())()(()(((())()(()(((())(((((((((((()))())))((((((())((()()((((()())())((((()()))((())(((((()(()()(()()()((())(()((()()((((()(((((()((()(()((((()())((((((()(((((()()(()(()((((())))(())(())(())((((()(()()((((()((((()()((()((((((())))(((((()))))()))(()((((((((()(((())())(((())))(()(()((())(((()((()()(((((()((()()(((())()(()))(((((((())(()(((((()))((()((()((()))(())())((((()((((())()(()))(((()(((((((((((((((())(((((((((()))(((()(()()()()((((((()((())()((((((((()(())(((((((((((()(()((())()((()()(()(()()((((()()((())(()((()()(()()((((()(((((((())))((((())(())()(((()()((()()((((()((()(((()((())(((()()()((((()((((()()(()(()((((((((())(()(((((())(()())(((((((()())()(()((((()((())(()()())((((()()(((()((((())(())(()()(((((((((()()))()(((())(()(()((((((())(()()())(()))()()(((()(((()((())(()(((((((()(()(()((()(((((()(()((()(()((((((()((((()()((((()(((()((())(()(()((()()((((()()(())()(())(((())(()((((((((()())(((((((((()(())()((((())))()))()()(((((()()((((((())(()()(((()(()(((((((()(()(((((((())(())((((()((()(())))((((()()())(()))((()())((((()(((((()(()(())(()(()()())(((((()(((((()((((()()((((((((()()))(()((((((())((((())()(()(((()()()(((()(()(())(())(((((()(())())((((())(())(()(((()(((((())((((())())((()(((((((()(((())(()(()))(((((((((()((()((()()(()((((())(((()((())((((())(()(((()(((()(()((((()(((())(()(((()(()()(()(()((()()(()())(())())((()(()(((()(((()(((()()(((((((((()(((((((((()()(((()(((()())((((()(()(((()()()((())((((((((((())(()(((()((((()())((((()((()))(((()()()(((((()(((((((())((()())(()((((())((((((((())(()((()((((((((((()()((()((()()))(((()())()())()(((()())()()(()(()(((((((())()))(())()))())()()((())()((()((((()((()((())(((((()((((((()(())))(()))())(((()))((()()(()(((()))((((())()(((()))))()(()(())()(((((())(()(()(())(())()((()()()((((()(())((()())(()(()))(()(()(()()(())()()(()((())()((()))))()))((()(()()()()((()())(()))())()(()(((((((((())())((()((()((((((())()((((())(((())((()(()()()((())(()((())(((()((((()()((()(()(((((())()))()((((((()))((())(((()()))(((())(())()))(((((((())(())())()(())(((((()))()((()))()(()()((()()()()()())((((((('
difference = 0

difference = input_string.count("(") - input_string.count(")")

print("4) Es gibt " , difference, "mehr ( zeichen als ) Zeichen")

# 5)
# how may elements are in each of the following lists?
first_list = ['drs', 'clt', 'iny', 'alv', 'nvy', 'bpt', 'gkw', 'fkm', 'jrz', 'hov', 'bqu', 'bov', 'eju', 'eiz', 'fjm', 'bek', 'abj', 'hov', 'coq', 'iox', 'efs', 'krw', 'evy', 'elw', 'gil', 'ajq', 'cek', 'fkm', 'mnu', 'adf']
second_list = ['dlz', 'akw', 'bry', 'eyz', 'bny', 'kst', 'elw', 'ekl', 'djm', 'aft', 'gkw', 'krw', 'coq', 'evy', 'bov', 'bkl', 'bov', 'afs', 'hov', 'fjq', 'cqu', 'ahq', 'beh', 'ijz', 'ksy', 'ilx', 'htu', 'epz', 'ekl', 'ajq']

print("5) in first_list sind: ", len(first_list), " Elemente.", " In second_list sind ", len(second_list), "Elemente")

# 6)
# which and how many elements are common to the two lists above? 
commonelements = set()

for i in first_list:                    # jedes Element der ersten Liste
    for t in second_list:               # wird mit jedem Element der zweiten Liste 
        if i == t:                      # verglichen
            commonelements.add(i)       # und hinzugefügt sofern es gleich ist --> Commonelements ist eine Liste und somit werden doppelte Elemente nicht gezählt


print("6) Es gibt", len(commonelements), "gleiche Elemente in der Liste. Diese sind ", commonelements)            

# 7)
# how often does the character 'a' occur in each of the lists above?

# prüft Anzahl a's in einer Liste"
def check_as(given_list): 
    combined_list = ""
    for i in given_list:
        combined_list = combined_list + i
    return combined_list.count("a")

print("7) Es gibt ", check_as(first_list), "a's in first_list und ", check_as(second_list), "a's in second_list" )


# 8)
# Bonus question (voluntary):
# 5 & 3, 5 | 3, 5 ^ 3, ~5, 5 << 1, 5 >> 1
# Predict the result of each of these operations, then execute them and check whether your prediction was correct

# Prediction:
# 5 & 3 --> 1 richtig
# 5 | 3 --> 0 falsch
# 5 ^ 3 --> (110) --> 6 richtig
# ~5 --> 251 falsch
# 5 << 1 --> 9 falsch
# 5 >> 1 --> 2 richtig

#Ergebnisse
# print(5 & 3)
#print(5 | 3)
#print(5 ^ 3)
#print(~5)
#print(5 << 1) 
#print(5 >> 1)

