# EXERCISES PYTHON - 10.10.2025 - KAAN B. TÜRKMEN


# 1)
# what are the quotient and remainder after integer division of 2711274328912 by 23369245575
x = 2711274328912
y = 23369245575
div = x//y
mod = x%y

print(f"The quotient of the devision of {x} by {y} equals: {div}  -  The remainder is: {mod}")

# advanced:

def divide(x, y):
    return x // y

def modulo(x, y):
    return x % y

print(f"The quotient of the devision of {x} by {y} equals: {divide(x, y)}  -  The remainder is: {modulo(x, y)}")


# 2)
# assume the variable below is a temperature in degrees Fahrenheit. Print the same temperature converted to °C.
t_fahrenheit = 451
print(f"This is the temperature in °C: {round((5/9)*(t_fahrenheit - 32), 2)}")

# advanced:

def fahrenheitToCelsius(x):
    return round((5/9)*(x - 32), 2)

print(f"This is the temperature in °C: {fahrenheitToCelsius(t_fahrenheit)}")


# 3)
# Given the string 
ds = "DataScience"
# Print the first three and (separately) the last four letters
# Print the string backwards
# Replace "Science" with "Analytics"; `print(ds)` should result in the output 'DataAnalytics'
s = ""
for i in range(3):
    s = s + ds[i]
print(s) # First three letters

s = ""
for i in range(len(ds)-4, len(ds)):
    s = s + ds[i]
print(s) # Last four letters

s = ""
for i in range(len(ds)-1, -1, -1):
    s = s + ds[i]
print(s) # Backwards

s = ""
for i in range(4):
    s = s + ds[i]
s = s + "Analytics"
print(s) # DataAnalytics


# 4)
# determine how many more '(' than ')' symbols occur in the following string:
input_string = '()()(()()()(()()((()((()))((()((((()()((((()))()((((())(((((((()(((((((((()(((())(()()(()((()()(()(())(()((((()((()()()((((())((((((()(()(((()())(()((((()))())(())(()(()()))))))))((((((((((((()())()())())(())))(((()()()((((()(((()(()(()()(()(()()(()(((((((())(())(())())))((()())()((((()()((()))(((()()()())))(())))((((())(((()())(())(()))(()((((()())))())((()(())(((()((((()((()(())())))((()))()()(()(()))))((((((((()())((((()()((((()(()())(((((()(()())()))())(((()))()(()(()(()((((()(())(()))(((((()()(()()()(()(((())())(((()()(()()))(((()()(((())())(()(())())()()(())()()()((()(((()(())((()()((())()))((()()))((()()())((((()(()()(()(((()))()(()))))((()(((()()()))(()(((())()(()((()())(()(()()(()())(())()(((()(()())()((((()((()))))())()))((()()()()(())()())()()()((((()))))(()(((()()(((((((())()))()((((()((())()(()())(())()))(()(()())(((((((())))(((()))())))))()))())((())(()()((())()())()))))()((()()())(())((())((((()())())()()()(((()))())))()()))())(()()()(()((((((()()))())()))()(((()(((())((((()()()(()))())()()))))())()))())((())()())(((((())())((())())))(((())(((())(((((()(((((())(()(()())())(()(())(()))(()((((()))())()))))())))((()(()))))())))(((((())()))())()))))()))))(((()))()))))((()))((()((()(()(())()())))(()()()(())()))()((((())))))))(())(()((()()))(()))(()))(()((()))))))()()((((()()))()())()))))))()()()))(()((())(()))((()()()())()(((()((((())())))()((((()(()))))))())))()()())()))(()))))(()())()))))))((())))))))())()))()((())())))(()((()))()))(())))))(()))()())()()))((()(()))()()()()))))())()()))())(())()()))()))((()))))()()(()())))))()()()))((((()))()))))(()(())))(()())))((())())(()))()))))()())))()())()())))))))))()()))))())))((())((()))))())))(((()())))))))(()))()()))(()))()))))()())))))())((((()())))))))())))()()))))))))()))()))))()))))))(())))))))))())))))))))))))))())())((())))))))))()))((())))()))))))))())()(()))))))())))))()()()())()(()()()(()())(()))()()()(()())))())())))()))))())))))))()()()()())(())())()())()))))(()()()()()))))()))())())))((()())()())))()))()))))(()())))()))))))))(((()))()()))))))))))))))))))))(()))(()((()))())))())(()))(()(()(())))))()(()))()))()()))))))))))))()((()())(())())()(())))))())()())((()()))))(()()))))())()(())()))))))))))))))))))))()))(()(()())))))))()()((()))()))))))((())))()))))))))((()))())()()))())()()))((()))())))))))))))(()())()))(())((()(()()))(()())(())))()())(()(())()()))))()))()(()))))))(()))))))))))(()))())))))))))())))))())))(())))))()))))(())())))))))))()(()))))()())))())(()))()())))))))))))))())()()))))()))))))())))))()))))(())(()()()()((())()))())(()))((())()))())())(())(()()))))()))(())()()((())(())))(())))()))())))))))))()(((((())())))(())()))))(())))((()))()(((((((()))))()()))(())))))()(()))))(()()))()))())))))))(()())()))))))))())))(()))())()))(())()((())())()())())(()(()))))()))))))((()())(())()()(()())))()()))(())(())(()))())))()))(()))()()))((((()))))()))((()()()))))()))()))())))(()))()))))(())))()))())()(()))()())))())))))))())))())))()()))))))(()))())())))()))()()())())))))))))))))())))()))(()()))))())))())()(())))())))))))))))))))))()()())())))))()()()((()(()))()()(())()())()))()))))()()()))))))((()))))))))()(()(()((((((()()((()())))))))))))()))())))))((())())(()))())))())))))())()()())(())))())))()())())(())))))))()()(())))()))())))())())())()))))))))()))(()()()())())())))(())())))))))()()())()))))())))())()(())())))))))()())()))(()()(())())))()(()((()()((()()(((((())(()())()))(())()))(())))(())))))))()))()))((()))()))()))))))))()))))))))((()()())(()))(((()))(())))()))((())(((())))()())))())))))((())))))(())())((((((())())()(()))()(()((()())))((())()(()(()))))(())(()()())(())))())((()(((())())))(((()())())))())()(())())((((()()))))())((()))()()()()(())(((((((()()()((()))())(()())))(())())((((()()(()))))()((())))((())()))()(((()))())))()))((()(()))(())(()((((())((((()()(()()))(((())(()))))((((()(()))(())))))((()))(()))((()(((()(()))(()(()((()(())(()(()(()(()()((()))())(((())(()(()))))(()))()()))(())))(())()(((())(()))()((((()()))))())(()))))((())()((((()(((()))())())(((()))()())((())(())())(())()(())()(()()((((((()()))))()()(((()()))))()())()(((()(()))(()(()())(()(()))))(((((()(((())())))))(((((()((()()((())())((((((()(())(()()((()()()()()()()(()()))()(((()))()))(((((((())(((()((()())()((((())(((()(())))()((()(()()()((())((()())()))()))())))())((((((()))(()(()()()))(()((()(()(()))()((()(((()()()((())(((((())()(()))())())((()(())))(()(()())(())((())())())(((()()()(())))))())(()))))))()))))))())((()()()))((()((((((()))(((()((((()()()(((()))())()(()()(((()((()()()()())()()))()()()(()(())((()))))(()))())))))))()(()()(((((())()(()(((((()((()(()()())(()((((((((()((((((())()((((()()()((()((()((((((()))((())))))))())()))((()(()))()(()()(()((())((()()((((((((((((()())(()()()))((((()((((((())(()))())(()()((()()))()(((((((()((()()((((((()(((())))((())))((((((((()()(((((((())(((((()())(((())((())()((((()(((((((()(()(((()((((((()(((()(((((((((((()()((()()(()))((()()(((()(((())))((((())()(()(((())()(()(((())(((((((((((()))())))((((((())((()()((((()())())((((()()))((())(((((()(()()(()()()((())(()((()()((((()(((((()((()(()((((()())((((((()(((((()()(()(()((((())))(())(())(())((((()(()()((((()((((()()((()((((((())))(((((()))))()))(()((((((((()(((())())(((())))(()(()((())(((()((()()(((((()((()()(((())()(()))(((((((())(()(((((()))((()((()((()))(())())((((()((((())()(()))(((()(((((((((((((((())(((((((((()))(((()(()()()()((((((()((())()((((((((()(())(((((((((((()(()((())()((()()(()(()()((((()()((())(()((()()(()()((((()(((((((())))((((())(())()(((()()((()()((((()((()(((()((())(((()()()((((()((((()()(()(()((((((((())(()(((((())(()())(((((((()())()(()((((()((())(()()())((((()()(((()((((())(())(()()(((((((((()()))()(((())(()(()((((((())(()()())(()))()()(((()(((()((())(()(((((((()(()(()((()(((((()(()((()(()((((((()((((()()((((()(((()((())(()(()((()()((((()()(())()(())(((())(()((((((((()())(((((((((()(())()((((())))()))()()(((((()()((((((())(()()(((()(()(((((((()(()(((((((())(())((((()((()(())))((((()()())(()))((()())((((()(((((()(()(())(()(()()())(((((()(((((()((((()()((((((((()()))(()((((((())((((())()(()(((()()()(((()(()(())(())(((((()(())())((((())(())(()(((()(((((())((((())())((()(((((((()(((())(()(()))(((((((((()((()((()()(()((((())(((()((())((((())(()(((()(((()(()((((()(((())(()(((()(()()(()(()((()()(()())(())())((()(()(((()(((()(((()()(((((((((()(((((((((()()(((()(((()())((((()(()(((()()()((())((((((((((())(()(((()((((()())((((()((()))(((()()()(((((()(((((((())((()())(()((((())((((((((())(()((()((((((((((()()((()((()()))(((()())()())()(((()())()()(()(()(((((((())()))(())()))())()()((())()((()((((()((()((())(((((()((((((()(())))(()))())(((()))((()()(()(((()))((((())()(((()))))()(()(())()(((((())(()(()(())(())()((()()()((((()(())((()())(()(()))(()(()(()()(())()()(()((())()((()))))()))((()(()()()()((()())(()))())()(()(((((((((())())((()((()((((((())()((((())(((())((()(()()()((())(()((())(((()((((()()((()(()(((((())()))()((((((()))((())(((()()))(((())(())()))(((((((())(())())()(())(((((()))()((()))()(()()((()()()()()())((((((('
openCount = 0
closedCount = 0

for char in input_string:
    if char == "(":
        openCount += 1
    elif char == ")":
        closedCount += 1

print(f"There are {openCount} Open Brackets - ( and {closedCount} Closed Brackets - ).")
if openCount > closedCount:
    print("There are more Open Brackets than Closed Brackets.")
else:
    print("There are more Closed Brackets than Open Brackets.")


# 5)
# how many elements are in each of the following lists?
first_list = ['drs', 'clt', 'iny', 'alv', 'nvy', 'bpt', 'gkw', 'fkm', 'jrz', 'hov', 'bqu', 'bov', 'eju', 'eiz', 'fjm', 'bek', 'abj', 'hov', 'coq', 'iox', 'efs', 'krw', 'evy', 'elw', 'gil', 'ajq', 'cek', 'fkm', 'mnu', 'adf']
second_list = ['dlz', 'akw', 'bry', 'eyz', 'bny', 'kst', 'elw', 'ekl', 'djm', 'aft', 'gkw', 'krw', 'coq', 'evy', 'bov', 'bkl', 'bov', 'afs', 'hov', 'fjq', 'cqu', 'ahq', 'beh', 'ijz', 'ksy', 'ilx', 'htu', 'epz', 'ekl', 'ajq']

x = 0
y = 0
for i in first_list:
    x += 1
for i in second_list:
    y += 1
print(f"There are {x} Elements in the First List and {y} Elements in the Second List.")


# 6)
# which and how many elements are common to the two lists above? 
commons = []
count = 0
for i in first_list:
    for j in second_list:
        if i == j:
            commons.append(i)
            count += 1
print(f"There are {count} Common Elements in both lists: {commons}")


# 7)
# how often does the character 'a' occur in each of the lists above?
a_count1 = 0
a_count2 = 0
for i in first_list:
    for char in i:
        if char == "a":
            a_count1 += 1
for i in second_list:
    for char in i:
        if char == "a":
            a_count2 += 1
print(f"There are {a_count1} a's in the First List and {a_count2} a's in the Second List.")


# 8)
# Bonus question (voluntary):
# 5 & 3, 5 | 3, 5 ^ 3, ~5, 5 << 1, 5 >> 1
# Predict the result of each of these operations, then execute them and check whether your prediction was correct
# Predictions:
# 5 & 3: True
# 5 | 3: True
# 5 ^ 3: False
# ~5: False
# 5 << 1: 10
# 5 >> 1: 1

print(f"Printing Predictions:\n5 & 3: {5&3}\n5 | 3: {5 | 3}\n5 ^ 3: {5 ^ 3}\n~5: {~5}\n5 << 1: {5<<1}\n5 >> 1: {5>>1}")