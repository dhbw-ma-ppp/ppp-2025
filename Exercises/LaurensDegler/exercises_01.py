# use this template for completing todays exercises
# make a copy of the file, in a folder with your own name
# add code below to answer the questions; for each question there should be
# a single print() which will give the answer(s) to that question.

# 1)
# what are the quotient and remainder after integer division of 2711274328912 by 23369245575
zähler, nenner = 2711274328912, 23369245575
quotient = zähler // nenner
remainder = zähler % nenner
print(f"Der Quotient von {zähler} / {nenner} ist {quotient}, der Rest beträgt {remainder}.")

# 2)
# assume the variable below is a temperature in degrees Fahrenheit. Print the same temperature converted to °C.
t_fahrenheit = 451
t_celsius = (t_fahrenheit - 32) * 5 / 9
print(f"{t_fahrenheit}°F entsprechen {t_celsius:.2f}°C.")

# 3)
# Given the string 
ds = "DataScience"
# Print the first three and (separately) the last four letters
print(f"Die ersten drei Buchstaben sind: {ds[:3]}")
print(f"Die letzten vier Buchstaben sind: {" ".join(ds[-4:])}")
# Print the string backwards
print(f"Der String rückwärts lautet: {ds[::-1]}")
# Replace "Science" with "Analytics"; `print(ds)` should result in the output 'DataAnalytics'
print(f"Ersetze 'Science' durch 'Analytics': {ds.replace('Science', 'Analytics')}")

# 4)
# determine how many more '(' than ')' symbols occur in the following string:
input_string = '()()(()()()(()()((()((()))((()((((()()((((()))()((((())(((((((()(((((((((()(((())(()()(()((()()(()(())(()((((()((()()()((((())((((((()(()(((()())(()((((()))())(())(()(()()))))))))((((((((((((()())()())())(())))(((()()()((((()(((()(()(()()(()(()()(()(((((((())(())(())())))((()())()((((()()((()))(((()()()())))(())))((((())(((()())(())(()))(()((((()())))())((()(())(((()((((()((()(())())))((()))()()(()(()))))((((((((()())((((()()((((()(()())(((((()(()())()))())(((()))()(()(()(()((((()(())(()))(((((()()(()()()(()(((())())(((()()(()()))(((()()(((())())(()(())())()()(())()()()((()(((()(())((()()((())()))((()()))((()()())((((()(()()(()(((()))()(()))))((()(((()()()))(()(((())()(()((()())(()(()()(()())(())()(((()(()())()((((()((()))))())()))((()()()()(())()())()()()((((()))))(()(((()()(((((((())()))()((((()((())()(()())(())()))(()(()())(((((((())))(((()))())))))()))())((())(()()((())()())()))))()((()()())(())((())((((()())())()()()(((()))())))()()))())(()()()(()((((((()()))())()))()(((()(((())((((()()()(()))())()()))))())()))())((())()())(((((())())((())())))(((())(((())(((((()(((((())(()(()())())(()(())(()))(()((((()))())()))))())))((()(()))))())))(((((())()))())()))))()))))(((()))()))))((()))((()((()(()(())()())))(()()()(())()))()((((())))))))(())(()((()()))(()))(()))(()((()))))))()()((((()()))()())()))))))()()()))(()((())(()))((()()()())()(((()((((())())))()((((()(()))))))())))()()())()))(()))))(()())()))))))((())))))))())()))()((())())))(()((()))()))(())))))(()))()())()()))((()(()))()()()()))))())()()))())(())()()))()))((()))))()()(()())))))()()()))((((()))()))))(()(())))(()())))((())())(()))()))))()())))()())()())))))))))()()))))())))((())((()))))())))(((()())))))))(()))()()))(()))()))))()())))))())((((()())))))))())))()()))))))))()))()))))()))))))(())))))))))())))))))))))))))())())((())))))))))()))((())))()))))))))())()(()))))))())))))()()()())()(()()()(()())(()))()()()(()())))())())))()))))())))))))()()()()())(())())()())()))))(()()()()()))))()))())())))((()())()())))()))()))))(()())))()))))))))(((()))()()))))))))))))))))))))(()))(()((()))())))())(()))(()(()(())))))()(()))()))()()))))))))))))()((()())(())())()(())))))())()())((()()))))(()()))))())()(())()))))))))))))))))))))()))(()(()())))))))()()((()))()))))))((())))()))))))))((()))())()()))())()()))((()))())))))))))))(()())()))(())((()(()()))(()())(())))()())(()(())()()))))()))()(()))))))(()))))))))))(()))())))))))))())))))())))(())))))()))))(())())))))))))()(()))))()())))())(()))()())))))))))))))())()()))))()))))))())))))()))))(())(()()()()((())()))())(()))((())()))())())(())(()()))))()))(())()()((())(())))(())))()))())))))))))()(((((())())))(())()))))(())))((()))()(((((((()))))()()))(())))))()(()))))(()()))()))())))))))(()())()))))))))())))(()))())()))(())()((())())()())())(()(()))))()))))))((()())(())()()(()())))()()))(())(())(()))())))()))(()))()()))((((()))))()))((()()()))))()))()))())))(()))()))))(())))()))())()(()))()())))())))))))())))())))()()))))))(()))())())))()))()()())())))))))))))))())))()))(()()))))())))())()(())))())))))))))))))))))()()())())))))()()()((()(()))()()(())()())()))()))))()()()))))))((()))))))))()(()(()((((((()()((()())))))))))))()))())))))((())())(()))())))())))))())()()())(())))())))()())())(())))))))()()(())))()))())))())())())()))))))))()))(()()()())())())))(())())))))))()()())()))))())))())()(())())))))))()())()))(()()(())())))()(()((()()((()()(((((())(()())()))(())()))(())))(())))))))()))()))((()))()))()))))))))()))))))))((()()())(()))(((()))(())))()))((())(((())))()())))())))))((())))))(())())((((((())())()(()))()(()((()())))((())()(()(()))))(())(()()())(())))())((()(((())())))(((()())())))())()(())())((((()()))))())((()))()()()()(())(((((((()()()((()))())(()())))(())())((((()()(()))))()((())))((())()))()(((()))())))()))((()(()))(())(()((((())((((()()(()()))(((())(()))))((((()(()))(())))))((()))(()))((()(((()(()))(()(()((()(())(()(()(()(()()((()))())(((())(()(()))))(()))()()))(())))(())()(((())(()))()((((()()))))())(()))))((())()((((()(((()))())())(((()))()())((())(())())(())()(())()(()()((((((()()))))()()(((()()))))()())()(((()(()))(()(()())(()(()))))(((((()(((())())))))(((((()((()()((())())((((((()(())(()()((()()()()()()()(()()))()(((()))()))(((((((())(((()((()())()((((())(((()(())))()((()(()()()((())((()())()))()))())))())((((((()))(()(()()()))(()((()(()(()))()((()(((()()()((())(((((())()(()))())())((()(())))(()(()())(())((())())())(((()()()(())))))())(()))))))()))))))())((()()()))((()((((((()))(((()((((()()()(((()))())()(()()(((()((()()()()())()()))()()()(()(())((()))))(()))())))))))()(()()(((((())()(()(((((()((()(()()())(()((((((((()((((((())()((((()()()((()((()((((((()))((())))))))())()))((()(()))()(()()(()((())((()()((((((((((((()())(()()()))((((()((((((())(()))())(()()((()()))()(((((((()((()()((((((()(((())))((())))((((((((()()(((((((())(((((()())(((())((())()((((()(((((((()(()(((()((((((()(((()(((((((((((()()((()()(()))((()()(((()(((())))((((())()(()(((())()(()(((())(((((((((((()))())))((((((())((()()((((()())())((((()()))((())(((((()(()()(()()()((())(()((()()((((()(((((()((()(()((((()())((((((()(((((()()(()(()((((())))(())(())(())((((()(()()((((()((((()()((()((((((())))(((((()))))()))(()((((((((()(((())())(((())))(()(()((())(((()((()()(((((()((()()(((())()(()))(((((((())(()(((((()))((()((()((()))(())())((((()((((())()(()))(((()(((((((((((((((())(((((((((()))(((()(()()()()((((((()((())()((((((((()(())(((((((((((()(()((())()((()()(()(()()((((()()((())(()((()()(()()((((()(((((((())))((((())(())()(((()()((()()((((()((()(((()((())(((()()()((((()((((()()(()(()((((((((())(()(((((())(()())(((((((()())()(()((((()((())(()()())((((()()(((()((((())(())(()()(((((((((()()))()(((())(()(()((((((())(()()())(()))()()(((()(((()((())(()(((((((()(()(()((()(((((()(()((()(()((((((()((((()()((((()(((()((())(()(()((()()((((()()(())()(())(((())(()((((((((()())(((((((((()(())()((((())))()))()()(((((()()((((((())(()()(((()(()(((((((()(()(((((((())(())((((()((()(())))((((()()())(()))((()())((((()(((((()(()(())(()(()()())(((((()(((((()((((()()((((((((()()))(()((((((())((((())()(()(((()()()(((()(()(())(())(((((()(())())((((())(())(()(((()(((((())((((())())((()(((((((()(((())(()(()))(((((((((()((()((()()(()((((())(((()((())((((())(()(((()(((()(()((((()(((())(()(((()(()()(()(()((()()(()())(())())((()(()(((()(((()(((()()(((((((((()(((((((((()()(((()(((()())((((()(()(((()()()((())((((((((((())(()(((()((((()())((((()((()))(((()()()(((((()(((((((())((()())(()((((())((((((((())(()((()((((((((((()()((()((()()))(((()())()())()(((()())()()(()(()(((((((())()))(())()))())()()((())()((()((((()((()((())(((((()((((((()(())))(()))())(((()))((()()(()(((()))((((())()(((()))))()(()(())()(((((())(()(()(())(())()((()()()((((()(())((()())(()(()))(()(()(()()(())()()(()((())()((()))))()))((()(()()()()((()())(()))())()(()(((((((((())())((()((()((((((())()((((())(((())((()(()()()((())(()((())(((()((((()()((()(()(((((())()))()((((((()))((())(((()()))(((())(())()))(((((((())(())())()(())(((((()))()((()))()(()()((()()()()()())((((((('
anzahl_offene_klammern = input_string.count('(')
anzahl_geschlossene_klammern = input_string.count(')')
differenz = anzahl_offene_klammern - anzahl_geschlossene_klammern
print(f"In dem String gibt es {anzahl_offene_klammern} '(' und {anzahl_geschlossene_klammern} ')'. Die Differenz beträgt {differenz}.")

# 5)
# how may elements are in each of the following lists?
first_list = ['drs', 'clt', 'iny', 'alv', 'nvy', 'bpt', 'gkw', 'fkm', 'jrz', 'hov', 'bqu', 'bov', 'eju', 'eiz', 'fjm', 'bek', 'abj', 'hov', 'coq', 'iox', 'efs', 'krw', 'evy', 'elw', 'gil', 'ajq', 'cek', 'fkm', 'mnu', 'adf']
second_list = ['dlz', 'akw', 'bry', 'eyz', 'bny', 'kst', 'elw', 'ekl', 'djm', 'aft', 'gkw', 'krw', 'coq', 'evy', 'bov', 'bkl', 'bov', 'afs', 'hov', 'fjq', 'cqu', 'ahq', 'beh', 'ijz', 'ksy', 'ilx', 'htu', 'epz', 'ekl', 'ajq']
print(f"Die erste Liste enthält {len(first_list)} Elemente.")
print(f"Die zweite Liste enthält {len(second_list)} Elemente.")

# 6)
# which and how many elements are common to the two lists above?
# das folgende funktioniert auch:
# first_set = set(first_list)
# second_set = set(second_list)
# schnittmenge = first_set.intersection(second_set)
# print(f"Die gemeinsamen Elemente sind: {schnittmenge}. Es gibt {len(schnittmenge)} gemeinsame Elemente.")
common_elements = set(first_list) & set(second_list)
print(f"Die gemeinsamen Elemente sind: {common_elements}. Es gibt {len(common_elements)} gemeinsame Elemente.")


# 7)
# how often does the character 'a' occur in each of the lists above?
anzahl_a_first_list = sum(item.count('a') for item in first_list)
anzahl_a_second_list = sum(item.count('a') for item in second_list)
print(f"Der Buchstabe 'a' kommt in der ersten Liste {anzahl_a_first_list} mal vor.")
print(f"Der Buchstabe 'a' kommt in der zweiten Liste {anzahl_a_second_list} mal vor.")


# 8)
# Bonus question (voluntary):
# 5 & 3, 5 | 3, 5 ^ 3, ~5, 5 << 1, 5 >> 1
# Predict the result of each of these operations, then execute them and check whether your prediction was correct
print(f"5 & 3 = {5 & 3}")   # bitwise AND: 0101 & 0011 = 0001 -> 1
print(f"5 | 3 = {5 | 3}")   # kein plan
print(f"5 ^ 3 = {5 ^ 3}")   # kein plan
print(f"~5 = {~5}")         # kein plan
print(f"5 << 1 = {5 << 1}") # bitshift nach links also 0101 -> 1010 = 10
print(f"5 >> 1 = {5 >> 1}") # bitshift nach rechts also 0101 -> 0010 = 2